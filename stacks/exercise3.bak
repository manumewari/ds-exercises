
/* https://github.com/kuychaco/algoClass/blob/master/data-structures/stack.js */

/*** 1. Implement a stack with a min method which returns the minimum element currently in the stack.
This method should have O(1) time complexity. Make sure your implementation handles duplicates. */

function Stack(){
    this.stackObj = {};
    this.index = 0;
    this.maxSize = 10;
    this.minObj = {};
}

Stack.prototype.push = function(num) {

    if (this.index === this.maxSize)
    {
        console.log("Max capacity already reached. Remove element before adding a new one.");
    }
    else
    {
        if(this.index === 0) //First element
        {
            this.minObj[ this.index ] = num;
        }
        else
        {
            console.log(this.index+" :: "+ this.minObj[ this.index-1 ]+" :: num : "+num);
            this.minObj[ this.index ] = ( this.minObj[ this.index-1 ] < num )? this.minObj[ this.index-1 ] : num;
        }

        this.stackObj[ this.index++ ] = num;
        console.log("current size of stack is "+ this.index);
    }
}

Stack.prototype.pop = function() {
    if( this.index === 0 )
    {
        console.log("there are no elements in the stack");
    }
    else
    {
        console.log("this.index ==> "+this.index);
        console.log("popping element "+ this.stackObj[this.index-1]);
        delete this.stackObj[ this.index-- ];
    }
}

Stack.prototype.min = function() {
    if( this.index === 0 )
    {
        console.log("there are no elements in the stack");
    }
    else
    {
        console.log("this.index ==> "+this.index);
        console.log("smallest element is "+ this.minObj[this.index-1]);
    }
}

var myStack = new Stack();


